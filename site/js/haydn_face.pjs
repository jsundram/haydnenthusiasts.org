int original_width = 524;
int original_height = 640;
float multiplier = .1;
float growth = 1.06;
color bg = color(255, 255, 255);
boolean nice = false;

void setup() 
{
    canvas = document.getElementById("full")
    console.log(canvas.offsetWidth, canvas.offsetHeight);
    size(canvas.offsetWidth, canvas.offsetHeight);
    ellipseMode(CENTER);

    window.onresize = function() { redraw(); }
     
    frameRate(30);
}

void draw() 
{
    if (canvas.offsetWidth != width || canvas.offsetHeight != height)
        size(canvas.offsetWidth, canvas.offsetHeight);
  
    if (multiplier > 1)
        multiplier = 1;

    background(bg);
    float aspect = original_width / original_height;
    float desired_width = aspect * height;
    PVector trans = new PVector(.5*(width - desired_width), 0);
    float scal = height / original_height;

    for (int i = 0; i < multiplier*face_data.length; i++)
    {
        // modulus seems broken, use this instead
        //if (i - 10*floor(i / 10) < 3) continue;
        
        // cheat by using js types in processing
        var row = face_data[i];
        var bounds = row[0];
        var c = row[1];
        float rx = scal * (bounds[2] - bounds[0]);
        float ry = scal * (bounds[3] - bounds[1]);
        PVector pos = new PVector(bounds[0], bounds[1]);
        pos.mult(scal);
        pos.add(trans);


        // Calculate force between mouse and center of ellipse.
        PVector F = new PVector(0, 0);
        if (!nice) {
            PVector mouse = new PVector(mouseX, mouseY);
            PVector r21 = PVector.sub(pos, mouse);
            float d = pow(r21.mag(), 2);
            F = PVector.mult(PVector.div(r21, d), 100*rx);
        }

        // startup noise for excitement
        float jitterx = (1 - multiplier) * random(5);
        float jittery = (1 - multiplier) * random(5);

        // draw
        fill(c[0], c[1], c[2], 200);
        noStroke();
        ellipse(pos.x + F.x + jitterx, pos.y + F.y + jittery, multiplier * rx, multiplier * ry);
    }
    
    multiplier *= growth;
    nice = false;  // being nice twice in a row is overkill.
}

void mouseOver(){
    loop();
}
void mouseOut(){
    noLoop();
    nice = true;
    redraw();
}
